----------------------- REVIEW 2 ---------------------

Section 4 explains the new types, !n(A) and ?n(A), which are somewhat like !A and ?A in linear logic except that number of clients to a shared channel is characterized as being exactly n. The corresponding term construct (in a further extension of the pi-calculus) are less precise, which is presumably acceptable since the type is available (although a discussion of type checking or inference is absent from the paper).

TODO: add line stating that type inference is decidable as long as we have type annotations on the axioms

However, there are also some negatives. The biggest is that the scenarios in which the present solution works, namely for servers with a fixed number of clients, is exceedingly limited and impractical.  The authors note this as well, and some hints are provided how these limitations might be overcome.  I find particularly recursive types and recursively defined processes to be necessary, in addition to the possibility of having a variable or unbounded number of clients.

Secondly, there is some significant related work that the authors should contrast.  Specifically, Balzer and Pfenning [ICFP 2017] have given an extension of [5] that permits not only races but also permits deadlock.  Balzer et al. [CONCUR 2018] then show that this extension is universal: it can model the untyped asynchronous pi-calculus and therefore also all of the communication-based nondeterminism presented in this paper.  Of course, permitting deadlock might be seen as "overshooting", but an argument for permitting it could be made along very similar lines of why permitting races is important for some situations.  It's worth noting that Balzer and Pfenning's system also already addresses a number of the shortcomings of the present paper: recursive types are handled, as are recursively defined processes, and servers with arbitrarily many clients.  On the other hand, while it can interpret the pi-calculus it is no longer directly based on it, and while it is still closely related to (intuitionistic) linear logic and sequent calculus, this connection is not as strong as in the present paper.

----------------------- REVIEW 3 ---------------------
Overall, I found the paper interesting and well written.  I thought that the emojis were cute, but I would probably only have used them in the beginning when motivating the example. However, I was very surprised that the paper fails to contrast with relevant related work. [1] extends piDILL/SILL with sharing, and thus introduces races.  As shown in [2], this introduces nondeterminism into the resulting calculus and thus recovers the expressiveness of the untyped asynchronous pi-calculus for session types.  The work permits recursive processes and permits deadlocks.  In [3], deadlock-freedom is moreover recovered.  I'm aware of the fact that [3] has not yet been published at the time of submission, but am including it for future reference.

[1] Stephanie Balzer and Frank Pfenning.
    Manifest Sharing with Session Types.
    ICFP 2017.
[2] Stephanie Balzer, Frank Pfennig, and Bernardo Toninho.
    A Universal Session Type for Untyped Asynchronous Communication.
    CONCUR 2018.
[3] Stephanie Balzer, Bernardo Toninho, and Frank Pfenning.
    Manifest Deadlock-Freedom for Shared Session Types.
    ESOP 2019.

TODO: discuss this related work

p.4: I think there are missing "or"s connecting the lines in the shown transition.

TODO: there are, but nobody else noticed, and it wouldn't be pretty to add them in

p.15: When reading the paper, I was wondering about the relationship of the new constructs with the exponential in linear logic.  Could you elaborate on it further?  It's only touched upon very briefly.

TODO: do this

New rules ! and Cont: Isn't the restriction to the same type limiting?  In the example, doesn't it mean that cake and disappointment are of the same type?

TODO: this is true, but we can use sum types here to create the type of "cake or disappointment", so no, it is not limiting

----------------------- REVIEW 4 ---------------------

P3, when commenting on the operator + in pi-calculus. Actually, + is for general non-deterministic choices and accounts for both external and internal (here local) choices, which can be also mixed.  Also the discussion about non-deterministic choices being different from non-determinism in pi is confusing to me, since you can write internal choices simply as \tau.P + \tau.Q.

P3, when illustrating explicit non-determinism with the running example. It is unclear to me what are you looking for with the transformation, since the example changes the set of channels.

Def 3.1. What is the interpretation of x > {} (offered nullary choice). To what extent is it different from 0.

Def 3.2. Why (nu x) 0 = 0 is not considered? Is this because names need to be discarded explicitly by halt and wait?

Proof of Th 3.14. What do you mean by “the maximum prefix of cuts and
mixes”. The proof relies on Cor 3.13 what does seem right to me.

Th 3.15. I don’t see in your language any way of generating infinite computations (you don’t have recursion or bang mechanisms), so I wonder about the relevance of the result and the fact that you restrict to well-typed terms.

Why do you provide proofs for results in [8]? Do the proofs here make
evident other aspects?

Corollary 4.9. Same concerns as for Corollary 3.13. Analogously, I wonder how this affects to Th 3.14.

Th 4.11. Analogous comments to Th 3.15.
