module LocalChoice where

open import IO using (run; putStrLn; mapM‚Ä≤; _>>_)
open import Coinduction using (‚ôØ_)
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Data.Pos as ‚Ñï‚Å∫ using (‚Ñï‚Å∫; suc)
open import Data.String using (String)
open import Data.List using (List; []; _‚à∑_; map)
open import Data.Colist using (fromList)
open import Function using (_$_; _‚àò_)

open import Data.Environment
open import nodcap.Base
open import nodcap.Typing
open import nodcap.LocalChoice
open import nodcap.Norm
open import nodcap.Show renaming (showTerm to show)
open import nodcap.NF.Show renaming (showTerm to showNF)

Bit : Type
Bit = ùüè ‚äï ùüè

bit‚ÇÅ bit‚ÇÇ : ‚ä¢ Bit ‚à∑ []
bit‚ÇÅ = sel‚ÇÅ halt
bit‚ÇÇ = sel‚ÇÇ halt

randomBit : ‚ä¢ Bit ‚à∑ []
randomBit = bit‚ÇÅ or bit‚ÇÇ

main = run (mapM‚Ä≤ putStrLn (fromList strs))
  where
    strs = "Process:"
         ‚à∑ show randomBit
         ‚à∑ "Result:"
         ‚à∑ map showNF (nfND randomBit)

-- -}
-- -}
-- -}
-- -}
-- -}
