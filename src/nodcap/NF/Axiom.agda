open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Data.Pos as ‚Ñï‚Å∫
open import Data.List as L using (List; []; _‚à∑_; _++_)
open import Function using (_$_)
open import Relation.Binary.PropositionalEquality as P using (_‚â°_; _‚â¢_)

open import Logic.Context
open import nodcap.Base
open import nodcap.NF.Typing

module nodcap.NF.Axiom where

{-# TERMINATING #-}
-- Theorem:
--   Identity expansion.
--
-- Problematic calls:
--   * in the recursive calls under ‚Öãn and ‚äón, it is the
--     size of the resource index which is decreasing, not
--     the size of the type itself.
ax : {A : Type} ‚Üí ‚ä¢‚Åø·∂† A ‚à∑ A ^ ‚à∑ []
ax { ùüè }
  = exch (bbl [])
  $ wait halt
ax { ‚ä• }
  = wait halt
ax { ùüé }
  = exch (bbl [])
  $ loop
ax { ‚ä§ }
  = loop
ax { A ‚äó B }
  = exch (bbl [])
  $ recv
  $ exch (bwd [] (_ ‚à∑ _ ‚à∑ []))
  $ send ax ax
ax { A ‚Öã B }
  = recv
  $ exch (bwd [] (_ ‚à∑ _ ‚à∑ []))
  $ send
  ( exch (bbl []) ax )
  ( exch (bbl []) ax )
ax { A ‚äï B }
  = exch (bbl [])
  $ case
  ( exch (bbl [])
  $ sel‚ÇÅ ax
  )
  ( exch (bbl [])
  $ sel‚ÇÇ ax
  )
ax { A & B }
  = case
  ( exch (bbl [])
  $ sel‚ÇÅ
  $ exch (bbl []) ax
  )
  ( exch (bbl [])
  $ sel‚ÇÇ
  $ exch (bbl []) ax
  )
ax { ![ suc zero ] A }
  = mk!‚ÇÅ
  $ exch (bbl [])
  $ mk?‚ÇÅ
  $ exch (bbl []) ax
ax { ![ suc (suc n) ] A }
  = exch (bbl [])
  $ cont {m = suc zero} {n = suc n}
  $ exch (bwd [] (_ ‚à∑ _ ‚à∑ []))
  $ pool {m = suc zero} {n = suc n}
  ( ax )
  ( ax )
ax { ?[ suc zero ] A }
  = mk?‚ÇÅ
  $ exch (bbl [])
  $ mk!‚ÇÅ
  $ exch (bbl []) ax
ax { ?[ suc (suc n) ] A }
  = cont {m = suc zero} {n = suc n}
  $ exch (bwd [] (_ ‚à∑ _ ‚à∑ []))
  $ pool {m = suc zero} {n = suc n}
  ( exch (bbl []) ax )
  ( exch (bbl []) ax )
